name: 'Plugin test for EC-CUBE'
description: 'Workflow for testing EC-CUBE plugins'
branding:
  icon: check
  color: green
inputs:
  working-directory:
    description: 'Working directory relative to the root directory.'
    default: 'ec-cube'
  plugin-directory:
    description: 'Plugin directory relative to the root directory.'
    default: './'
  plugin-code:
    description: ''
    required: true
  plugin-package-name:
    description: ''
    required: true
  plugin-archive:
    description: ''
    default: 'true'
  eccube-versions:
    description: ''
    required: true
  php-versions:
    description: ''
    required: true
  database-url:
    description: ''
    required: true
  database-server-version:
    description: ''
    required: true
  database-charset:
    description: ''
    required: true
  pre-composer-install:
    description: ''
    default: ''
  dependency-plugins-enable:
    description: ''
    default: ''
  dependency-plugins-disable:
    description: ''
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup mock-package-api
      run: |
        mkdir -p /tmp/repos
        docker run --name package-api -d -v /tmp/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api:composer2
      shell: bash

    - name: Archive plugin
      if: ${{ inputs.plugin-archive == 'true' }}
      working-directory: ${{ inputs.plugin-directory }}
      run: |
        tar cvzf ${GITHUB_WORKSPACE}/${{ inputs.plugin-code }}.tar.gz ./*
        mv ${GITHUB_WORKSPACE}/${{ inputs.plugin-code }}.tar.gz /tmp/repos/${{ inputs.plugin-code }}.tgz
      shell: bash

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-versions }}
        extensions: mbstring, xml, ctype, iconv, mysql, intl, :xdebug
        tools: composer:v2

    - name: Checkout EC-CUBE
      uses: actions/checkout@v4
      with:
        repository: EC-CUBE/ec-cube
        ref: ${{ inputs.eccube-versions }}
        path: ${{ inputs.working-directory }}

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: pre composer install
      if: ${{ inputs.pre-composer-install }}
      working-directory: ${{ inputs.working-directory }}
      run: ${{ inputs.pre-composer-install }}
      shell: bash

    - name: composer install
      working-directory: ${{ inputs.working-directory }}
      run: composer install --dev --no-interaction -o --apcu-autoloader
      shell: bash

    - name: Setup EC-CUBE
      working-directory: ${{ inputs.working-directory }}
      run: |
        bin/console doctrine:database:create
        bin/console doctrine:schema:create
        bin/console eccube:fixtures:load
        bin/console doctrine:query:sql "update dtb_base_info set authentication_key='dummy'"
      env:
        APP_ENV: 'test'
        APP_DEBUG: 0
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        DATABASE_CHARSET: ${{ matrix.database_charset }}
      shell: bash

    - name: Setup plugin
      working-directory: ${{ inputs.working-directory }}
      run: |
        bin/console eccube:composer:require ${{ inputs.plugin-package-name }}
        bin/console cache:clear --no-warmup
        ${{ inputs.dependency-plugins-enable }}
        bin/console eccube:plugin:enable --code ${{ inputs.plugin-code }}
      env:
        APP_ENV: 'test'
        APP_DEBUG: 0
        DATABASE_URL: ${{ inputs.database-url }}
        DATABASE_SERVER_VERSION: ${{ inputs.database-server-version }}
        DATABASE_CHARSET: ${{ inputs.database-charset }}
        ECCUBE_PACKAGE_API_URL: 'http://127.0.0.1:8080'
        USE_SELFSIGNED_SSL_CERTIFICATE: '1'
      shell: bash

    - name: Run PHPUnit
      working-directory: ${{ inputs.working-directory }}
      run: |
        rm -r var/cache
        dir="app/Plugin/${{ inputs.plugin-code }}/Tests"
        if [ -d $dir ];then
          ./vendor/bin/phpunit -c app/Plugin/${{ inputs.plugin-code }}/phpunit.xml.dist $dir
        fi
      env:
        APP_ENV: 'test'
        APP_DEBUG: 0
        DATABASE_URL: ${{ inputs.database-url }}
        DATABASE_SERVER_VERSION: ${{ inputs.database-server-version }}
        DATABASE_CHARSET: ${{ inputs.database-charset }}
      shell: bash

    - name: Update plugin
      working-directory: ${{ inputs.working-directory }}
      run: |
        bin/console eccube:plugin:update ${{ inputs.plugin-code }}
      env:
        APP_ENV: 'test'
        APP_DEBUG: 0
        DATABASE_URL: ${{ inputs.database-url }}
        DATABASE_SERVER_VERSION: ${{ inputs.database-server-version }}
        DATABASE_CHARSET: ${{ inputs.database-charset }}
      shell: bash

    - name: Uninstall plugin
      working-directory: ${{ inputs.working-directory }}
      run: |
        bin/console eccube:plugin:disable --code ${{ inputs.plugin-code }}
        ${{ inputs.dependency-plugins-disable }}
        bin/console eccube:composer:remove ${{ inputs.plugin-package-name }}
      env:
        APP_ENV: 'test'
        APP_DEBUG: 0
        DATABASE_URL: ${{ inputs.database-url }}
        DATABASE_SERVER_VERSION: ${{ inputs.database-server-version }}
        DATABASE_CHARSET: ${{ inputs.database-charset }}
      shell: bash
